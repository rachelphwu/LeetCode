// class Solution {
//     public boolean containsDuplicate(int[] nums) {
//       if(nums.length >= 1000000) return false;
//       for(int i = 0; i < nums.length - 1; i++ ){
//         for(int j = i + 1; j < nums.length; j++)
//           if(nums[j] == nums[i]) return true;
//       }  
//       return false;
//     }
// }

/*
Above solution will time out when the test case becomes too large
 */

 class Solution {
    public boolean containsDuplicate(int[] nums) {
      if(nums == null || nums.length == 0) return false;
      HashSet<Integer> tempNums = new HashSet<>();
      //check if num exists before insertions
      for(int n: nums){
        if(tempNums.contains(n)) return true;
        else tempNums.add(n);
      }
      return false;
    }
}